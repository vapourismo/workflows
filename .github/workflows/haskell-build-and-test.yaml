name: Haskell Build and Test

on:
  workflow_call:
    inputs:
      ghc-versions:
        type: string
        default: latest
        required: false

      cabal-versions:
        type: string
        default: latest
        required: false

      unstable-ghc-versions:
        type: string
        default: ""
        required: false

      run-on:
        type: string
        default: ubuntu-latest
        required: false

jobs:
  process-inputs:
    name: "Process workflow inputs"
    runs-on: ubuntu-latest
    outputs:
      ghc-versions: ${{ steps.main.outputs.ghc-versions }}
      unstable-ghc-versions: ${{ steps.main.outputs.unstable-ghc-versions }}
      cabal-versions: ${{ steps.main.outputs.cabal-versions }}
      run-on: ${{ steps.main.outputs.run-on }}
    steps:
      - name: Process workflow inputs
        id: main
        run: |
          ghc_versions_spaced=$(echo "${{ inputs.ghc-versions }}" | sort -u | tr '[:space:]' ' ' | xargs)
          ghc_versions_inner=$(echo '"'${ghc_versions_spaced// /'", "'}'"')
          echo "::set-output name=ghc-versions::[$ghc_versions_inner]"

          unstable_ghc_versions_spaced=$(echo "${{ inputs.unstable-ghc-versions }}" | sort -u | tr '[:space:]' ' ' | xargs)
          unstable_ghc_versions_inner=$(echo '"'${unstable_ghc_versions_spaced// /'", "'}'"')
          echo "::set-output name=unstable-ghc-versions::[$unstable_ghc_versions_inner]"

          cabal_versions_spaced=$(echo "${{ inputs.cabal-versions }}" | sort -u | tr '[:space:]' ' ' | xargs)
          cabal_versions_inner=$(echo '"'${cabal_versions_spaced// /'", "'}'"')
          echo "::set-output name=cabal-versions::[$cabal_versions_inner]"

          run_on_spaced=$(echo "${{ inputs.run-on }}" | sort -u | tr '[:space:]' ' ' | xargs)
          run_on_inner=$(echo '"'${run_on_spaced// /'", "'}'"')
          echo "::set-output name=run-on::[$run_on_inner]"

  build-and-test:
    name: "Build and Test"
    needs: process-inputs
    strategy:
      matrix:
        ghc-version: ${{ fromJSON(needs.process-inputs.outputs.ghc-versions) }}
        cabal-version: ${{ fromJSON(needs.process-inputs.outputs.cabal-versions) }}
        run-on: ${{ fromJSON(needs.process-inputs.outputs.run-on) }}
    runs-on: ${{ matrix.run-on }}
    steps:
      - name: Check out source
        uses: actions/checkout@v2

      - name: Check build cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-${{ matrix.ghc-version }}

      - name: Setup GHC and Cabal
        uses: haskell/actions/setup@v1.2.9
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: ${{ matrix.cabal-version }}

      - name: Configure Cabal packages
        run: cabal configure --disable-documentation --enable-tests --disable-optimization

      - name: Build dependencies
        run: cabal build --dependencies-only all

      - name: Build
        run: cabal build all

      - name: Test
        run: cabal test all

  build-and-test-unstable:
    name: "Build and Test"
    needs: process-inputs
    strategy:
      matrix:
        ghc-version: ${{ fromJSON(needs.process-inputs.outputs.unstable-ghc-versions) }}
        cabal-version: ${{ fromJSON(needs.process-inputs.outputs.cabal-versions) }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Check out source
        uses: actions/checkout@v2

      - name: Check build cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-${{ matrix.ghc-version }}

      - name: Setup GHC and Cabal
        uses: haskell/actions/setup@v1.2.9
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: ${{ matrix.cabal-version }}

      - name: Configure Cabal packages
        run: cabal configure --disable-documentation --enable-tests --disable-optimization

      - name: Build dependencies
        run: cabal build --dependencies-only all

      - name: Build
        run: cabal build all

      - name: Test
        run: cabal test all
